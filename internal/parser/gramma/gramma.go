// Code generated by goyacc -o gramma.go gramma.y. DO NOT EDIT.

//line gramma.y:2
package gramma

import __yyfmt__ "fmt"

//line gramma.y:2

import (
	"strings"
	"time"
)

type (
	Int     = int
	String  = string
	Strings = []string
	Float   = float32
	Bool    = bool
	Time    = time.Time
)

//line gramma.y:20
type yySymType struct {
	yys int
	String
	Strings
	Int
	Float
	Bool
	Time
	Damage
	DamageModifiersMap
	Object
	Heal
	Kill
	Participant
	BuffDebuff
	ConnectToGameSession
	Start
	CombatLine
	Finished
	Reward
}

const COMBAT = 57346
const GAME = 57347
const EOL = 57348
const ARROW = 57349
const FLOAT = 57350
const INT = 57351
const STRING = 57352
const SOURCE = 57353
const FRIENDLY_FIRE = 57354
const TIME = 57355
const DAMAGE = 57356
const DAMAGE_MODIFIER = 57357
const HEAL = 57358
const KILL = 57359
const PARTICIPANT = 57360
const BUFF = 57361
const DEBUFF = 57362
const CONNECT_TO_GAME_SESSION_PREFIX = 57363
const EQ_DELIM = 57364
const LOCAL_CLIENT_TEAM = 57365
const START = 57366
const GAMEPLAY_FINISHED = 57367
const ACTUAL_GAME_TIME = 57368
const FINISH_REASON = 57369
const REWARD = 57370
const CLIENT_ADD_PLAYER = 57371
const CLIENT_PLAYER_LEAVE = 57372
const CLIENT_CONNECTED = 57373
const CLIENT_CONNECTION_CLOSED = 57374

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"COMBAT",
	"GAME",
	"EOL",
	"ARROW",
	"FLOAT",
	"INT",
	"STRING",
	"SOURCE",
	"FRIENDLY_FIRE",
	"TIME",
	"DAMAGE",
	"DAMAGE_MODIFIER",
	"HEAL",
	"KILL",
	"PARTICIPANT",
	"BUFF",
	"DEBUFF",
	"CONNECT_TO_GAME_SESSION_PREFIX",
	"EQ_DELIM",
	"LOCAL_CLIENT_TEAM",
	"START",
	"GAMEPLAY_FINISHED",
	"ACTUAL_GAME_TIME",
	"FINISH_REASON",
	"REWARD",
	"CLIENT_ADD_PLAYER",
	"CLIENT_PLAYER_LEAVE",
	"CLIENT_CONNECTED",
	"CLIENT_CONNECTION_CLOSED",
	"'|'",
	"'('",
	"')'",
	"';'",
	"'\\t'",
	"'\\''",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gramma.y:360

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 108,
	10, 20,
	-2, 42,
}

const yyPrivate = 57344

const yyLast = 132

var yyAct = [...]uint8{
	102, 67, 24, 123, 77, 77, 44, 45, 121, 119,
	50, 82, 115, 112, 98, 97, 76, 70, 27, 31,
	64, 52, 125, 105, 49, 79, 73, 43, 103, 44,
	45, 56, 113, 78, 14, 88, 15, 16, 17, 117,
	126, 54, 22, 71, 19, 20, 127, 36, 21, 110,
	63, 94, 95, 65, 41, 114, 101, 11, 103, 92,
	90, 47, 124, 118, 12, 116, 111, 108, 68, 106,
	89, 87, 86, 25, 83, 75, 69, 66, 84, 62,
	58, 40, 33, 30, 128, 91, 80, 61, 59, 38,
	120, 99, 96, 81, 104, 74, 72, 60, 57, 55,
	107, 109, 53, 51, 48, 46, 42, 34, 13, 1,
	2, 9, 39, 8, 37, 7, 35, 122, 10, 18,
	93, 85, 6, 32, 5, 28, 4, 26, 100, 3,
	23, 29,
}

var yyPact = [...]int16{
	51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 104, 20, 63, 63, 73, 72, 101, 25,
	80, 71, 33, 100, 63, -4, 99, 54, 98, -12,
	-27, -1000, 97, -16, -1000, 96, 17, 93, -3, 92,
	70, 79, -1000, 89, 78, 69, -1000, 63, -1000, -17,
	63, -1000, 67, -1000, 58, -1000, 66, -1000, -20, 21,
	88, -1000, -9, 87, 65, -1000, -21, -5, -1000, -10,
	77, -1000, 85, -22, 64, 63, 62, -1000, 61, 8,
	60, 49, 76, -1000, 48, 32, 84, -23, -24, 58,
	41, -1000, 46, 46, -1000, -1000, -13, 59, 58, 57,
	16, -1000, -1000, -1000, -1000, 56, -25, -6, -1000, -1000,
	40, -26, 55, 13, -1000, 53, -29, 82, -30, -36,
	52, -14, 18, 23, -1000, -1000, -1000, 75, -1000,
}

var yyPgo = [...]uint8{
	0, 1, 2, 131, 0, 130, 129, 128, 127, 126,
	125, 124, 123, 122, 121, 120, 119, 118, 117, 116,
	115, 114, 113, 112, 111, 110, 109,
}

var yyR1 = [...]int8{
	0, 26, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 6, 9, 11, 13, 17, 20, 22, 24, 1,
	1, 2, 2, 4, 4, 5, 7, 7, 8, 10,
	3, 3, 15, 15, 12, 14, 14, 18, 18, 19,
	16, 21, 23,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 5, 5, 5, 4, 5, 5, 5, 1,
	2, 3, 6, 1, 0, 8, 1, 3, 5, 7,
	3, 1, 1, 1, 7, 8, 0, 3, 0, 12,
	4, 11, 7,
}

var yyChk = [...]int16{
	-1000, -26, -25, -6, -9, -11, -13, -20, -22, -24,
	-17, 6, 13, 4, 14, 16, 17, 18, -16, 24,
	25, 28, 22, -5, -2, 10, -8, -2, -10, -3,
	10, -2, -12, 10, 6, -19, 22, -21, 9, -23,
	10, 21, 6, -2, 33, 34, 6, 7, 6, 36,
	37, 6, 37, 6, 24, 6, 34, 6, 10, 9,
	8, 9, 10, -2, 37, -2, 10, -1, 10, 10,
	37, 22, 8, 35, 8, 10, 37, 10, 38, 35,
	9, 8, 33, 10, -2, -14, 10, 10, 27, 10,
	11, 9, 11, -15, 19, 20, 8, 38, 38, -1,
	-7, 15, -4, 12, -4, 36, 10, -1, 10, -4,
	33, 10, 38, 38, 15, 38, 10, 26, 10, 38,
	8, 38, -18, 39, 10, 36, 22, 23, 9,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 0, 0, 15, 0, 0, 0, 0, 0,
	0, 0, 11, 0, 0, 0, 12, 0, 13, 0,
	0, 14, 0, 16, 0, 17, 0, 18, 0, 0,
	0, 21, 0, 0, 0, 30, 0, 0, 19, 0,
	0, 40, 0, 0, 0, 0, 36, 20, 0, 0,
	0, 0, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 22, 24, 24, 32, 33, 0, 0, 0, 0,
	24, 26, 29, 23, 34, 0, 0, 0, -2, 25,
	0, 0, 0, 0, 27, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 41, 35, 39, 0, 37,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 37,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 38,
	34, 35, 3, 3, 39, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 36,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 33,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:129
		{
			yylex.(*Lexer).res = yyDollar[1].CombatLine
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:134
		{
			yyVAL.CombatLine.Damage = &yyDollar[1].Damage
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:137
		{
			yyVAL.CombatLine.Heal = &yyDollar[1].Heal
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:140
		{
			yyVAL.CombatLine.Kill = &yyDollar[1].Kill
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:143
		{
			yyVAL.CombatLine.Participant = &yyDollar[1].Participant
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:146
		{
			yyVAL.CombatLine.Start = &yyDollar[1].Start
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:149
		{
			yyVAL.CombatLine.Finished = &yyDollar[1].Finished
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:152
		{
			yyVAL.CombatLine.Reward = &yyDollar[1].Reward
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:155
		{
			yyVAL.CombatLine.ConnectToGameSession = &yyDollar[1].ConnectToGameSession
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:157
		{
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:161
		{
			yyVAL.Damage = yyDollar[4].Damage
			yyVAL.Damage.Time = yyDollar[1].Time
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:166
		{
			yyVAL.Heal = yyDollar[4].Heal
			yyVAL.Heal.Time = yyDollar[1].Time
		}
	case 13:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:171
		{
			yyVAL.Kill = yyDollar[4].Kill
			yyVAL.Kill.Time = yyDollar[1].Time
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:176
		{
			yyVAL.Participant = yyDollar[4].Participant
			yyVAL.Participant.Time = yyDollar[1].Time
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:181
		{
			yyVAL.ConnectToGameSession = yyDollar[3].ConnectToGameSession
			yyVAL.ConnectToGameSession.Time = yyDollar[1].Time
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:186
		{
			yyVAL.Start = yyDollar[4].Start
			yyVAL.Start.Time = yyDollar[1].Time
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:191
		{
			yyVAL.Finished = yyDollar[4].Finished
			yyVAL.Finished.Time = yyDollar[1].Time
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:196
		{

		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:204
		{
			yyVAL.Strings = append(yyVAL.Strings, yyDollar[1].String)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gramma.y:204
		{
			yyVAL.Strings = append(yyDollar[1].Strings, yyDollar[2].String)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:206
		{
			yyVAL.Object = Object{
				Name:     yyDollar[1].String,
				ObjectID: yyDollar[3].Int,
			}
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gramma.y:212
		{
			yyVAL.Object = Object{
				PlayerObject: PlayerObject{
					ObjectName:  yyDollar[1].String,
					ObjectOwner: yyDollar[3].String,
				},
				ObjectID: yyDollar[6].Int,
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:222
		{
			yyVAL.Bool = true
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:222
		{
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gramma.y:232
		{
			yyVAL.Damage = Damage{
				Initiator:       yyDollar[1].Object,
				Recipient:       yyDollar[2].Object,
				DamageFull:      yyDollar[3].Float,
				DamageHull:      yyDollar[4].Float,
				DamageShield:    yyDollar[5].Float,
				Source:          yyDollar[6].String,
				DamageModifiers: yyDollar[7].DamageModifiersMap,
				FriendlyFire:    yyDollar[8].Bool,
			}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:245
		{
			yyVAL.DamageModifiersMap = DamageModifiersMap{
				DamageModifier(yyDollar[1].String): {},
			}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:249
		{
			yyVAL.DamageModifiersMap[DamageModifier(yyDollar[3].String)] = struct{}{}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:256
		{
			yyVAL.Heal = Heal{
				Initiator: yyDollar[1].Object,
				Recipient: yyDollar[3].Object,
				Heal:      yyDollar[4].Float,
				Source:    yyDollar[5].String,
			}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:270
		{
			if yyDollar[4].String != "killer" {
				yylex.Error("not a killer")
			}
			yyVAL.Kill = Kill{
				Killed:       yyDollar[1].Object,
				Killer:       yyDollar[5].Object,
				Source:       yyDollar[6].String,
				FriendlyFire: yyDollar[7].Bool,
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:282
		{
			yyVAL.Object = Object{
				Name: yyDollar[1].String,
				PlayerObject: PlayerObject{
					ObjectName: yyDollar[3].Object.Name,
				},
				ObjectID: yyDollar[3].Object.ObjectID,
			}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:290
		{
			yyVAL.Object = yyDollar[1].Object
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:295
		{
			yyVAL.BuffDebuff.IsBuff = true
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:295
		{
			yyVAL.BuffDebuff.IsDebuff = true
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:302
		{
			yyVAL.Participant = Participant{
				Name:           yyDollar[1].String,
				Ship:           yyDollar[3].String,
				Damage:         yyDollar[5].Participant.Damage,
				MostDamageWith: yyDollar[5].Participant.MostDamageWith,
				BuffDebuff:     yyDollar[6].BuffDebuff,
				FriendlyFire:   yyDollar[7].Bool,
			}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gramma.y:313
		{
			yyVAL.Participant.Damage = yyDollar[2].Float
			yyVAL.Participant.MostDamageWith = yyDollar[6].String
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:316
		{
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:320
		{
			yyVAL.Int = yyDollar[3].Int
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:320
		{
		}
	case 39:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gramma.y:324
		{
			yyVAL.Start = Start{
				What:              strings.Join(yyDollar[3].Strings, " "),
				GameMode:          yyDollar[5].String,
				MapName:           yyDollar[9].String,
				LocalClientTeamID: yyDollar[11].Int,
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:336
		{
			yyVAL.ConnectToGameSession.SessionID = yyDollar[3].Int
		}
	case 41:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gramma.y:344
		{
			yyVAL.Finished = Finished{
				WinnerTeamID: yyDollar[1].Int,
				WinReason:    yyDollar[3].String,
				FinishReason: strings.Join(yyDollar[7].Strings, " "),
				GameTime:     yyDollar[10].Float,
			}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:356
		{

		}
	}
	goto yystack /* stack new state and value */
}
