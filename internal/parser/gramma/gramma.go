// Code generated by goyacc -o gramma.go gramma.y. DO NOT EDIT.

//line gramma.y:2
package gramma

import __yyfmt__ "fmt"

//line gramma.y:2

import (
	"strings"
	"time"
)

type (
	Int     = int
	String  = string
	Strings = []string
	Float   = float32
	Bool    = bool
	Time    = time.Time
)

//line gramma.y:20
type yySymType struct {
	yys int
	// Common
	String
	Strings
	Int
	Float
	Bool
	Time
	// Combat log
	Damage
	DamageModifiersMap
	Object
	Heal
	Kill
	Participant
	BuffDebuff
	ConnectToGameSession
	Start
	Finished
	Reward
	CombatLine
	// Game log
	ClientAddPlayer
	ClientPlayerLeave
	ClientConnected
	ClientConnectionClosed
	GameLine
	// Result
	LogLine
}

const COMBAT = 57346
const GAME = 57347
const ARROW = 57348
const FLOAT = 57349
const INT = 57350
const STRING = 57351
const SOURCE = 57352
const FRIENDLY_FIRE = 57353
const TIME = 57354
const DAMAGE = 57355
const DAMAGE_MODIFIER = 57356
const ROCKET = 57357
const HEAL = 57358
const KILL = 57359
const PARTICIPANT = 57360
const BUFF = 57361
const DEBUFF = 57362
const CONNECT_TO_GAME_SESSION_PREFIX = 57363
const EQ_DELIM = 57364
const LOCAL_CLIENT_TEAM = 57365
const START = 57366
const GAMEPLAY_FINISHED = 57367
const ACTUAL_GAME_TIME = 57368
const FINISH_REASON = 57369
const REWARD = 57370
const CLIENT_ADD_PLAYER = 57371
const CLIENT_PLAYER_LEAVE = 57372
const CLIENT_CONNECTED = 57373
const CLIENT_CONNECTION_CLOSED = 57374

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"COMBAT",
	"GAME",
	"ARROW",
	"FLOAT",
	"INT",
	"STRING",
	"SOURCE",
	"FRIENDLY_FIRE",
	"TIME",
	"DAMAGE",
	"DAMAGE_MODIFIER",
	"ROCKET",
	"HEAL",
	"KILL",
	"PARTICIPANT",
	"BUFF",
	"DEBUFF",
	"CONNECT_TO_GAME_SESSION_PREFIX",
	"EQ_DELIM",
	"LOCAL_CLIENT_TEAM",
	"START",
	"GAMEPLAY_FINISHED",
	"ACTUAL_GAME_TIME",
	"FINISH_REASON",
	"REWARD",
	"CLIENT_ADD_PLAYER",
	"CLIENT_PLAYER_LEAVE",
	"CLIENT_CONNECTED",
	"CLIENT_CONNECTION_CLOSED",
	"'|'",
	"'('",
	"')'",
	"';'",
	"'\\t'",
	"'\\''",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gramma.y:492

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	9, 30,
	-2, 54,
}

const yyPrivate = 57344

const yyLast = 154

var yyAct = [...]uint8{
	121, 81, 43, 145, 63, 64, 92, 92, 67, 138,
	143, 141, 136, 131, 115, 114, 91, 84, 78, 68,
	147, 124, 66, 20, 94, 88, 63, 64, 70, 98,
	104, 69, 149, 46, 50, 132, 93, 148, 122, 85,
	54, 111, 112, 134, 59, 135, 62, 120, 17, 25,
	26, 27, 28, 122, 29, 109, 107, 30, 31, 32,
	129, 146, 140, 37, 137, 34, 35, 130, 77, 36,
	79, 127, 82, 125, 105, 103, 102, 44, 99, 90,
	83, 80, 76, 73, 71, 60, 58, 52, 49, 41,
	40, 150, 139, 100, 118, 108, 106, 96, 95, 86,
	75, 72, 61, 56, 39, 38, 142, 116, 113, 97,
	89, 123, 87, 74, 65, 19, 18, 126, 1, 4,
	128, 3, 2, 24, 16, 23, 15, 22, 14, 21,
	13, 117, 11, 57, 10, 55, 9, 53, 144, 12,
	33, 110, 101, 8, 51, 7, 47, 6, 45, 133,
	119, 5, 42, 48,
}

var yyPact = [...]int16{
	36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 111, 20, 41,
	-1000, -1000, -1000, -1000, -1000, 97, 96, 81, 80, 68,
	68, 79, 78, -1000, 18, 95, 77, 23, 76, -1000,
	94, -1000, -1000, 68, -7, -1000, 108, -1000, -14, -29,
	-1000, -1000, -18, -1000, 7, -1000, -6, -1000, 75, 93,
	74, -1000, 106, 92, 73, 68, -19, 68, 72, 63,
	71, -20, 17, 91, 105, -1000, -10, 103, 70, -1000,
	-21, -2, -1000, -11, 90, -1000, 89, 102, -4, 69,
	68, 67, -1000, 66, 3, 65, 88, 46, 87, -1000,
	45, 22, 101, -23, -24, 63, 86, 33, -1000, 42,
	42, -1000, -1000, -15, 64, 63, 62, -1000, -1000, 27,
	-1000, -1000, -1000, -1000, 58, -25, -3, -1000, 28, 31,
	-26, 55, -17, -1000, 84, -1000, 53, -27, 99, -1000,
	-28, -36, 52, -16, 15, 9, -1000, -1000, -1000, 83,
	-1000,
}

var yyPgo = [...]uint8{
	0, 1, 2, 153, 152, 151, 150, 0, 149, 148,
	147, 146, 145, 144, 143, 142, 141, 140, 139, 138,
	137, 136, 135, 134, 133, 132, 131, 130, 129, 128,
	127, 126, 125, 124, 123, 122, 121, 119, 118,
}

var yyR1 = [...]int8{
	0, 38, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 5, 10, 12,
	14, 18, 21, 23, 25, 27, 29, 31, 33, 1,
	1, 2, 2, 7, 7, 8, 8, 4, 6, 6,
	9, 11, 3, 3, 16, 16, 13, 15, 15, 19,
	19, 20, 17, 22, 24, 26, 26, 28, 30, 32,
	34,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	4, 3, 4, 4, 4, 3, 3, 3, 3, 1,
	2, 3, 6, 1, 0, 2, 0, 9, 1, 3,
	5, 7, 3, 1, 1, 1, 7, 8, 0, 3,
	0, 12, 4, 11, 7, 1, 0, 8, 2, 3,
	2,
}

var yyChk = [...]int16{
	-1000, -38, -35, -36, -37, -5, -10, -12, -14, -21,
	-23, -25, -18, -27, -29, -31, -33, 12, 5, 4,
	3, -28, -30, -32, -34, 29, 30, 31, 32, 13,
	16, 17, 18, -17, 24, 25, 28, 22, 8, 8,
	9, 9, -4, -2, 9, -9, -2, -11, -3, 9,
	-2, -13, 9, -20, 22, -22, 8, -24, 9, 21,
	9, 8, -2, 33, 34, 6, 36, 37, 37, 24,
	34, 9, 8, 9, 7, 8, 9, -2, 37, -2,
	9, -1, 9, 9, 37, 22, 8, 7, 35, 7,
	9, 37, 9, 38, 35, 8, 8, 7, 33, 9,
	-2, -15, 9, 9, 27, 9, 8, 10, 8, 10,
	-16, 19, 20, 7, 38, 38, -1, -26, 8, -6,
	14, -7, 11, -7, 36, 9, -1, 9, -7, 33,
	9, 38, 38, -8, 15, 14, 38, 9, 26, 8,
	9, 38, 7, 38, -19, 39, 9, 36, 22, 23,
	8,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 0, 0, 0,
	16, 25, 26, 27, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 0, 0, 0, 0, 0, 58,
	0, 60, 17, 0, 0, 18, 0, 19, 0, 0,
	43, 20, 0, 22, 0, 23, 0, 24, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 0, 0, 0, 42,
	0, 0, 29, 0, 0, 52, 0, 0, 0, 0,
	0, 48, 30, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 56, 0, 32, 34,
	34, 44, 45, 0, 0, 0, 0, 57, 55, 34,
	38, 41, 33, 46, 0, 0, 0, -2, 36, 0,
	0, 0, 0, 37, 0, 39, 0, 0, 0, 35,
	0, 50, 0, 0, 0, 0, 53, 47, 51, 0,
	49,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 37,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 38,
	34, 35, 3, 3, 39, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 36,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 33,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:172
		{
			yylex.(*lexer).res = yyDollar[1].LogLine
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:177
		{
			yyVAL.LogLine.Combat = yyDollar[1].CombatLine
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:180
		{
			yyVAL.LogLine.Game = yyDollar[1].GameLine
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:185
		{
			yyVAL.CombatLine = &yyDollar[1].Damage
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:188
		{
			yyVAL.CombatLine = &yyDollar[1].Heal
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:191
		{
			yyVAL.CombatLine = &yyDollar[1].Kill
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:194
		{
			yyVAL.CombatLine = &yyDollar[1].Participant
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:197
		{
			yyVAL.CombatLine = &yyDollar[1].Start
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:200
		{
			yyVAL.CombatLine = &yyDollar[1].Finished
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:203
		{
			yyVAL.CombatLine = &yyDollar[1].Reward
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:206
		{
			yyVAL.CombatLine = &yyDollar[1].ConnectToGameSession
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:211
		{
			yyVAL.GameLine = &yyDollar[1].ClientAddPlayer
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:214
		{
			yyVAL.GameLine = &yyDollar[1].ClientPlayerLeave
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:217
		{
			yyVAL.GameLine = &yyDollar[1].ClientConnected
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:220
		{
			yyVAL.GameLine = &yyDollar[1].ClientConnectionClosed
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:222
		{
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:228
		{
			yyVAL.Damage = yyDollar[4].Damage
			yyVAL.Damage.Time = yyDollar[1].Time
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:233
		{
			yyVAL.Heal = yyDollar[4].Heal
			yyVAL.Heal.Time = yyDollar[1].Time
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:238
		{
			yyVAL.Kill = yyDollar[4].Kill
			yyVAL.Kill.Time = yyDollar[1].Time
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:243
		{
			yyVAL.Participant = yyDollar[4].Participant
			yyVAL.Participant.Time = yyDollar[1].Time
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:248
		{
			yyVAL.ConnectToGameSession = yyDollar[3].ConnectToGameSession
			yyVAL.ConnectToGameSession.Time = yyDollar[1].Time
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:253
		{
			yyVAL.Start = yyDollar[4].Start
			yyVAL.Start.Time = yyDollar[1].Time
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:258
		{
			yyVAL.Finished = yyDollar[4].Finished
			yyVAL.Finished.Time = yyDollar[1].Time
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:263
		{

		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:269
		{
			yyVAL.ClientAddPlayer = yyDollar[3].ClientAddPlayer
			yyVAL.ClientAddPlayer.Time = yyDollar[1].Time
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:274
		{
			yyVAL.ClientPlayerLeave = yyDollar[3].ClientPlayerLeave
			yyVAL.ClientPlayerLeave.Time = yyDollar[1].Time
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:279
		{
			yyVAL.ClientConnected = yyDollar[3].ClientConnected
			yyVAL.ClientConnected.Time = yyDollar[1].Time
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:284
		{
			yyVAL.ClientConnectionClosed = yyDollar[3].ClientConnectionClosed
			yyVAL.ClientConnectionClosed.Time = yyDollar[1].Time
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:293
		{
			yyVAL.Strings = append(yyVAL.Strings, yyDollar[1].String)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gramma.y:293
		{
			yyVAL.Strings = append(yyDollar[1].Strings, yyDollar[2].String)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:295
		{
			yyVAL.Object = Object{
				Name:     yyDollar[1].String,
				ObjectID: yyDollar[3].Int,
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gramma.y:301
		{
			yyVAL.Object = Object{
				PlayerObject: PlayerObject{
					ObjectName:  yyDollar[1].String,
					ObjectOwner: yyDollar[3].String,
				},
				ObjectID: yyDollar[6].Int,
			}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:311
		{
			yyVAL.Bool = true
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:311
		{
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gramma.y:313
		{
			yyVAL.Int = yyDollar[2].Int
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:313
		{
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gramma.y:324
		{
			yyVAL.Damage = Damage{
				Initiator:       yyDollar[1].Object,
				Recipient:       yyDollar[2].Object,
				DamageFull:      yyDollar[3].Float,
				DamageHull:      yyDollar[4].Float,
				DamageShield:    yyDollar[5].Float,
				Source:          yyDollar[6].String,
				DamageModifiers: yyDollar[7].DamageModifiersMap,
				FriendlyFire:    yyDollar[8].Bool,
				Rocket:          yyDollar[9].Int,
			}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:338
		{
			yyVAL.DamageModifiersMap = DamageModifiersMap{
				DamageModifier(yyDollar[1].String): {},
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:342
		{
			yyVAL.DamageModifiersMap[DamageModifier(yyDollar[3].String)] = struct{}{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gramma.y:349
		{
			yyVAL.Heal = Heal{
				Initiator: yyDollar[1].Object,
				Recipient: yyDollar[3].Object,
				Heal:      yyDollar[4].Float,
				Source:    yyDollar[5].String,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:363
		{
			if yyDollar[4].String != "killer" {
				yylex.Error("not a killer")
			}
			yyVAL.Kill = Kill{
				Killed:       yyDollar[1].Object,
				Killer:       yyDollar[5].Object,
				Source:       yyDollar[6].String,
				FriendlyFire: yyDollar[7].Bool,
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:375
		{
			yyVAL.Object = Object{
				Name: yyDollar[1].String,
				PlayerObject: PlayerObject{
					ObjectName: yyDollar[3].Object.Name,
				},
				ObjectID: yyDollar[3].Object.ObjectID,
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:383
		{
			yyVAL.Object = yyDollar[1].Object
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:388
		{
			yyVAL.BuffDebuff.IsBuff = true
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:388
		{
			yyVAL.BuffDebuff.IsDebuff = true
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:395
		{
			yyVAL.Participant = Participant{
				Name:           yyDollar[1].String,
				Ship:           yyDollar[3].String,
				Damage:         yyDollar[5].Participant.Damage,
				MostDamageWith: yyDollar[5].Participant.MostDamageWith,
				BuffDebuff:     yyDollar[6].BuffDebuff,
				FriendlyFire:   yyDollar[7].Bool,
			}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gramma.y:406
		{
			yyVAL.Participant.Damage = yyDollar[2].Float
			yyVAL.Participant.MostDamageWith = yyDollar[6].String
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:409
		{
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:413
		{
			yyVAL.Int = yyDollar[3].Int
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:413
		{
		}
	case 51:
		yyDollar = yyS[yypt-12 : yypt+1]
//line gramma.y:417
		{
			yyVAL.Start = Start{
				What:              strings.Join(yyDollar[3].Strings, " "),
				GameMode:          yyDollar[5].String,
				MapName:           yyDollar[9].String,
				LocalClientTeamID: yyDollar[11].Int,
			}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gramma.y:429
		{
			yyVAL.ConnectToGameSession.SessionID = yyDollar[3].Int
		}
	case 53:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gramma.y:437
		{
			yyVAL.Finished = Finished{
				WinnerTeamID: yyDollar[1].Int,
				WinReason:    yyDollar[3].String,
				FinishReason: strings.Join(yyDollar[7].Strings, " "),
				GameTime:     yyDollar[10].Float,
			}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gramma.y:449
		{

		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gramma.y:455
		{
			yyVAL.Int = yyDollar[1].Int
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gramma.y:455
		{
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gramma.y:458
		{
			yyVAL.ClientAddPlayer = ClientAddPlayer{
				InGamePlayerID: yyDollar[2].Int,
				Name:           yyDollar[3].String,
				ClanTag:        yyDollar[4].String,
				PlayerID:       yyDollar[5].Int,
				Status:         yyDollar[6].Int,
				TeamID:         yyDollar[7].Int,
				GroupID:        yyDollar[8].Int,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gramma.y:471
		{
			yyVAL.ClientPlayerLeave = ClientPlayerLeave{
				InGamePlayerID: yyDollar[2].Int,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gramma.y:478
		{
			yyVAL.ClientConnected = ClientConnected{
				ServerAddr: yyDollar[2].String,
				MTU:        yyDollar[3].Int,
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gramma.y:486
		{
			yyVAL.ClientConnectionClosed = ClientConnectionClosed{
				Reason: yyDollar[2].String,
			}
		}
	}
	goto yystack /* stack new state and value */
}
